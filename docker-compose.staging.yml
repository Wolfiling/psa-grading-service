# ===============================================
# DOCKER COMPOSE - STAGING
# PSA GRADING APP - Environnement de prÃ©-production
# ===============================================
# ðŸ§ª Configuration staging pour tests finaux
# ðŸ”’ SÃ©curitÃ© renforcÃ©e avec secrets externes
# ðŸ“Š Monitoring et logs centralisÃ©s

version: '3.8'

# ===============================================
# SERVICES STAGING
# ===============================================
services:
  # ===============================================
  # APPLICATION PSA GRADING
  # ===============================================
  app:
    image: ${DOCKER_IMAGE:-ghcr.io/psa-grading/psa-grading-app:latest}
    
    container_name: psa-app-staging
    
    environment:
      # Configuration production-like
      - NODE_ENV=staging
      - PORT=5000
      
      # Base de donnÃ©es externe OVH/AWS
      - DATABASE_URL=${STAGING_DATABASE_URL}
      
      # Secrets depuis GitHub Actions
      - ADMIN_PASSWORD=${STAGING_ADMIN_PASSWORD}
      - SESSION_SECRET=${SESSION_SECRET}
      - PSA_SECRET=${PSA_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - PSA_CLIENT_SECRET=${PSA_CLIENT_SECRET}
      
      # Configuration domaine staging
      - ALLOWED_ORIGINS=https://staging.${DOMAIN}
      - PUBLIC_URL=https://staging.${DOMAIN}
      
      # Services externes
      - BREVO_API_KEY=${BREVO_API_KEY}
      - PSA_EMAIL=${PSA_EMAIL}
      - PSA_PASSWORD=${PSA_PASSWORD}
      
      # Configuration avancÃ©e
      - TRUST_PROXY=true
      - SECURITY_HEADERS=true
      - ENABLE_COMPRESSION=true
      - LOG_LEVEL=info
      
      # Performance staging
      - MAX_UPLOAD_SIZE=10
      - RATE_LIMIT_MAX=200
      - REQUEST_TIMEOUT=30000
      
      # Monitoring
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
      
    ports:
      - "5000:5000"
      - "9090:9090"  # MÃ©triques
      
    volumes:
      # Uploads persistants
      - psa_staging_uploads:/app/uploads
      - psa_staging_logs:/app/logs
      
      # Configuration SSL (si nÃ©cessaire)
      - /etc/ssl/certs:/etc/ssl/certs:ro
      
    networks:
      - psa-staging-network
      
    restart: unless-stopped
    
    # Ressources limitÃ©es pour staging
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    
    # Health check critique pour staging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/healthz"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s
      
    # Logging centralisÃ©
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=psa-app,environment=staging"

  # ===============================================
  # REVERSE PROXY NGINX (optionnel)
  # ===============================================
  nginx:
    image: nginx:alpine
    container_name: psa-nginx-staging
    
    ports:
      - "80:80"
      - "443:443"
      
    volumes:
      # Configuration Nginx
      - ./docker/nginx/staging.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      
      # Certificats SSL
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot:ro
      
      # Logs
      - psa_staging_nginx_logs:/var/log/nginx
      
    depends_on:
      - app
      
    networks:
      - psa-staging-network
      
    restart: unless-stopped
    
    # Health check Nginx
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===============================================
  # MONITORING - PROMETHEUS (optionnel)
  # ===============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: psa-prometheus-staging
    
    ports:
      - "9091:9090"
      
    volumes:
      - ./docker/prometheus/staging.yml:/etc/prometheus/prometheus.yml:ro
      - psa_staging_prometheus_data:/prometheus
      
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      
    networks:
      - psa-staging-network
      
    restart: unless-stopped

  # ===============================================
  # OBSERVABILITÃ‰ - GRAFANA (optionnel)
  # ===============================================  
  grafana:
    image: grafana/grafana:latest
    container_name: psa-grafana-staging
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-staging123!}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      
    ports:
      - "3001:3000"
      
    volumes:
      - psa_staging_grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      
    networks:
      - psa-staging-network
      
    restart: unless-stopped

# ===============================================
# VOLUMES STAGING
# ===============================================
volumes:
  # Application uploads
  psa_staging_uploads:
    driver: local
    
  # Logs application
  psa_staging_logs:
    driver: local
    
  # Logs Nginx
  psa_staging_nginx_logs:
    driver: local
    
  # DonnÃ©es monitoring
  psa_staging_prometheus_data:
    driver: local
    
  psa_staging_grafana_data:
    driver: local

# ===============================================
# RÃ‰SEAU STAGING
# ===============================================
networks:
  psa-staging-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16